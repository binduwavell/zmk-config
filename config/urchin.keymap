/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

// Layer definitions

#define BASE 0
#define SYM 1
#define EXT 2
#define MOD 3
#define SETTINGS 4

// Constants

#define HM_TAPPING_TERM 300
#define HM_TAPPING_TERM_FAST 200
#define HM_PRIOR_IDLE 150

// was 175

#define HM_QUICK_TAP 200

// -----------------

&sk {
    // don't release mods on other mods presses

    ignore-modifiers;
};

/ {
    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <HM_QUICK_TAP>;                // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33>;
            hold-trigger-on-release;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <HM_QUICK_TAP>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 3330 31 32 33>;
            hold-trigger-on-release;
        };

        // Enables holding the first mod-tap key
        // by performing a tap-release-hold sequence.
        // To use it: "&qt KEYCODE1 KEYCODE2"

        qt: quick_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "QUICK_TAP";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
        // sometimes my device thinks a modifier is being held down
        // pressing all modifiers fixes it.

        unstick: unstick_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT &kp RSHIFT &kp LCTRL &kp RCTRL &kp LALT &kp RALT &kp LGUI &kp RGUI>;
        };

        qu: qu_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp Q>,
                <&macro_release>,
                <&kp LSHIFT &kp RSHIFT>,
                <&macro_tap>,
                <&kp U>;
        };

        wh: wh_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp W>,
                <&macro_release>,
                <&kp LSHIFT &kp RSHIFT>,
                <&macro_tap>,
                <&kp H>;
        };

        ch: ch_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp C>,
                <&macro_release>,
                <&kp LSHIFT &kp RSHIFT>,
                <&macro_tap>,
                <&kp H>;
        };

        sh: sh_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp S>,
                <&macro_release>,
                <&kp LSHIFT &kp RSHIFT>,
                <&macro_tap>,
                <&kp H>;
        };

        th: th_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp T>,
                <&macro_release>,
                <&kp LSHIFT &kp RSHIFT>,
                <&macro_tap>,
                <&kp H>;
        };

        ck: ck_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp K>;
        };

        gh: gh_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp G>,
                <&macro_release>,
                <&kp LSHIFT &kp RSHIFT>,
                <&macro_tap>,
                <&kp H>;
        };

        ou: ou_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp O>,
                <&macro_release>,
                <&kp LSHIFT &kp RSHIFT>,
                <&macro_tap>,
                <&kp U>;
        };

        ion: ion {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp I>,
                <&macro_release>,
                <&kp LSHIFT &kp RSHIFT>,
                <&macro_tap>,
                <&kp O &kp N>;
        };

        ess: ess {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp E>,
                <&macro_release>,
                <&kp LSHIFT &kp RSHIFT>,
                <&macro_tap>,
                <&kp S &kp S>;
        };

        est: est {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp E>,
                <&macro_release>,
                <&kp LSHIFT &kp RSHIFT>,
                <&macro_tap>,
                <&kp S &kp T>;
        };

        ing: ing {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp I>,
                <&macro_release>,
                <&kp LSHIFT &kp RSHIFT>,
                <&macro_tap>,
                <&kp N &kp G>;
        };

        ist: ist {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp I>,
                <&macro_release>,
                <&kp LSHIFT &kp RSHIFT>,
                <&macro_tap>,
                <&kp S &kp T>;
        };

        able: able {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp A>,
                <&macro_release>,
                <&kp LSHIFT &kp RSHIFT>,
                <&macro_tap>,
                <&kp B &kp L &kp E>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // both left thumb keys

        combo_settings_left {
            timeout-ms = <200>;
            key-positions = <30 31>;
            bindings = <&mo SETTINGS>;
        };

        combo_settings_right {
            bindings = <&mo SETTINGS>;
            key-positions = <32 33>;
            timeout-ms = <200>;
        };

        // outer thumbs show mod layer

        combo_mods {
            timeout-ms = <200>;
            key-positions = <30 33>;
            bindings = <&mo MOD>;
        };

        combo_wf_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };

        combo_xc_capsword {
            bindings = <&caps_word>;
            key-positions = <21 22>;
        };

        combo_cd_tab {
            bindings = <&kp TAB>;
            key-positions = <22 23>;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <26 27>;
        };

        // Punctuation

        combo_uy_quote {
            bindings = <&kp SQT>;
            key-positions = <7 8>;
        };

        // Simplify access to hard to reach single characters
        // Simplify access to some bigrams

        combo_wn_wh {
            bindings = <&wh>;
            key-positions = <1 16>;
        };

        combo_cn_ch {
            bindings = <&ch>;
            key-positions = <22 16>;
        };

        combo_sn_sh {
            bindings = <&sh>;
            key-positions = <12 16>;
        };

        combo_st_th {
            bindings = <&th>;
            key-positions = <12 13>;
        };

        combo_fn_ck {
            bindings = <&ck>;
            key-positions = <2 16>;
        };

        combo_tn_gh {
            bindings = <&gh>;
            key-positions = <16 13>;
        };

        combo_io_ou {
            bindings = <&ou>;
            key-positions = <18 19>;
        };

        // Simplify access to some trigrams

        combo_in_ion {
            bindings = <&ion>;
            key-positions = <18 16>;
        };

        combo_es_ess {
            bindings = <&ess>;
            key-positions = <17 12>;
        };

        combo_et_est {
            bindings = <&est>;
            key-positions = <17 13>;
        };

        combo_ie_ing {
            bindings = <&ing>;
            key-positions = <18 17>;
        };

        combo_it_ist {
            bindings = <&ist>;
            key-positions = <18 13>;
        };

        // Simplify access to some 4grams

        combo_at_able {
            bindings = <&able>;
            key-positions = <10 13>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // Base alpha layer

        default_layer {
            label = "Base";
            bindings = <
&qu      &kp W    &kp F    &kp P    &kp B                       &kp J          &kp L    &kp U        &kp Y      &kp SEMICOLON
&kp A    &kp R    &kp S    &kp T    &kp G                       &kp M          &kp N    &kp E        &kp I      &kp O
&kp Z    &kp X    &kp C    &kp D    &kp V                       &kp K          &kp H    &kp COMMA    &kp DOT    &kp SLASH
                           &mo 1    &mt LEFT_SHIFT BACKSPACE    &lt 5 SPACE    &mo 2
            >;
        };

        // Numbers and high frequency symbols

        sym_layer {
            label = "Sym.";
            bindings = <
&kp EXCLAMATION    &kp AT              &kp HASH             &kp DOLLAR              &kp PERCENT              &kp SLASH       &kp N7     &kp N8    &kp N9    &kp MINUS
&kp CARET          &kp AMPERSAND       &kp ASTERISK         &kp LEFT_PARENTHESIS    &kp RIGHT_PARENTHESIS    &kp EQUAL       &kp N4     &kp N5    &kp N6    &kp UNDERSCORE
&kp GRAVE          &kp LEFT_BRACKET    &kp RIGHT_BRACKET    &kp LEFT_BRACE          &kp RIGHT_BRACE          &kp ASTERISK    &kp N1     &kp N2    &kp N3    &kp PLUS
                                                            &trans                  &trans                   &kp N0          &kp DOT
            >;
        };

        // Main modifiers and arrow keys

        ext_layer {
            label = "Mods";
            bindings = <
&none    &kp F7    &kp F8    &kp F9    &kp F10    &kp HOME          &kp PAGE_DOWN      &kp PAGE_UP     &kp END      &none
&none    &sk F4    &sk F5    &sk F6    &kp F11    &kp LEFT_ARROW    &kp DOWN_ARROW     &kp UP_ARROW    &kp RIGHT    &none
&none    &kp F1    &kp F2    &kp F3    &kp F12    &trans            &kp LS(LC(TAB))    &kp LC(TAB)     &none        &kp BACKSLASH
                             &mo 3     &trans     &trans            &trans
            >;
        };

        // Function keys with modifiers

        mod_layer {
            label = "FRow";
            bindings = <
&none       &kp C_PREV    &kp C_PP     &kp C_NEXT    &kp C_VOLUME_UP      &none    &mkp MB1      &mkp MB2     &mkp MB3    &none
&sk LGUI    &sk LALT      &sk LCTRL    &sk LSHIFT    &kp C_VOLUME_DOWN    &none    &sk RSHIFT    &sk RCTRL    &sk RALT    &sk RGUI
&none       &none         &none        &none         &kp C_MUTE           &none    &none         &none        &none       &none
                                       &none         &none                &none    &none
            >;
        };

        // Used to change the keyboard's settings.

        settings_layer {
            label = "Sett.";
            bindings = <
&bootloader    &none    &none    &bt BT_CLR    &bt BT_SEL 0    &bt BT_SEL 3    &none    &unstick    &none    &bootloader
&none          &none    &none    &none         &bt BT_SEL 1    &bt BT_SEL 4    &none    &none       &none    &none
&none          &none    &none    &none         &bt BT_SEL 2    &bt BT_SEL 5    &none    &none       &none    &none
                                 &none         &none           &none           &none
            >;
        };

        seond_layer {
            bindings = <
&kp Q        &kp ESCAPE    &kp LC(B)    &kp B     &trans           &trans    &kp J     &kp LBKT                &kp RBKT                 &kp APOS
&kp TAB      &trans        &kp LC(V)    &kp G     &trans           &trans    &kp M     &kp LEFT_PARENTHESIS    &kp RIGHT_PARENTHESIS    &kp ENTER
&kp LC(Z)    &kp LC(X)     &kp LC(C)    &kp V     &trans           &trans    &kp K     &kp LEFT_BRACE          &kp RIGHT_BRACE          &kp BSLH
                                        &trans    &kp BACKSPACE    &trans    &trans
            >;

            label = "2nd";
        };
    };
};
