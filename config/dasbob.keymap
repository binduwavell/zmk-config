#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define COMBO(NAME, BINDINGS, KEYPOS, LAYERS) \
combo_##NAME { \
    timeout-ms = <20>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <LAYERS>; \
};

/ {
    behaviors {
        hl: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods left";
            #binding-cells = <2>;

            //flavor = "hold-preferred";
            // flavor = "tap-preferred";

            flavor = "balanced";
            tapping-term-ms = <200>;

            //quick-tap-ms = <100>;

            hold-while-undecided;

            // global-quick-tap;

            bindings = <&kp>, <&kp>;

            // opposite side hand keys

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33 34 35>;
        };

        hr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods right";
            #binding-cells = <2>;

            //flavor = "hold-preferred";
            // flavor = "tap-preferred";

            flavor = "balanced";
            tapping-term-ms = <200>;
            hold-while-undecided;

            //quick-tap-ms = <100>;
            // global-quick-tap;

            bindings = <&kp>, <&kp>;

            // opposite side hand keys

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33 34 35>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            layers = <0>;
            key-positions = <1 2>;
            bindings = <&kp ESC>;
        };

        combo_tab {
            timeout-ms = <50>;
            layers = <0>;
            key-positions = <23 24>;
            bindings = <&kp TAB>;
        };

        combo_settings_left {
            bindings = <&mo 4>;
            key-positions = <30 31>;
        };

        combo_settings_right {
            bindings = <&mo 4>;
            key-positions = <35 34>;
        };

        combo_capsword {
            bindings = <&caps_word>;
            key-positions = <22 21>;
        };

        combo_enter {
            bindings = <&kp RS(LS(ENTER))>;
            key-positions = <27 26>;
        };

        combo_quote {
            bindings = <&kp APOS>;
            key-positions = <8 7>;
        };

        combo_wh {
            bindings = <&wh>;
            key-positions = <1 16>;
        };

        combo_th {
            bindings = <&th>;
            key-positions = <12 13>;
        };

        combo_ing {
            bindings = <&ing>;
            key-positions = <18 17>;
        };

        // COMBO(shiftablesch, &macro_shiftable_sch, 17 18, 0)
        // COMBO(UML_AE, &kp SQT , 11 12, 0)
        // COMBO(UML_OE, &kp SEMI, 12 13, 0)
        // COMBO(UML_UE, &kp LBKT, 10 11, 0)
        // COMBO(DE_SS, &kp MINUS, 18 19, 0)
    };

    macros {
        qu: macro_qu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp Q>,
                <&macro_release>,
                <&kp LC(LSHIFT) &kp LC(RSHIFT)>,
                <&macro_tap>,
                <&kp U>;

            label = "MACRO_QU";
        };

        wh: wh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp W>,
                <&macro_release>,
                <&kp LC(LSHIFT) &kp LC(RSHIFT)>,
                <&macro_tap>,
                <&kp H>;

            label = "WH";
        };

        th: th {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp T>,
                <&macro_release>,
                <&kp LC(LSHIFT) &kp LC(RSHIFT)>,
                <&macro_tap>,
                <&kp H>;

            label = "TH";
        };

        ing: ing {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp N &kp G>;
            label = "ING";
        };

        ch: ch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp C>,
                <&macro_release>,
                <&kp LC(LSHIFT) &kp LC(RSHIFT)>,
                <&macro_tap>,
                <&kp H>;

            label = "CH";
        };

        sh: sh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp S>,
                <&macro_release>,
                <&kp LC(LSHIFT) &kp LC(RSHIFT)>,
                <&macro_tap>,
                <&kp H>;

            label = "SH";
        };

        ck: ck {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp C>,
                <&macro_release>,
                <&kp LC(LSHIFT) &kp LC(RSHIFT)>,
                <&macro_tap>,
                <&kp K>;

            label = "CK";
        };

        gh: gh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp G>,
                <&macro_release>,
                <&kp LC(LSHIFT) &kp LC(RSHIFT)>,
                <&macro_tap>,
                <&kp H>;

            label = "GH";
        };

        ou: ou {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp O>,
                <&macro_release>,
                <&kp LC(LSHIFT) &kp LC(RSHIFT)>,
                <&macro_tap>,
                <&kp U>;

            label = "OU";
        };

        ion: ion {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp I>,
                <&macro_release>,
                <&kp LC(LSHIFT) &kp LC(RSHIFT)>,
                <&macro_tap>,
                <&kp O &kp N>;

            label = "ION";
        };

        ess: ess {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp E>,
                <&macro_release>,
                <&kp LC(LSHIFT) &kp LC(RSHIFT)>,
                <&macro_tap>,
                <&kp S &kp S>;

            label = "ESS";
        };

        est: est {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp E>,
                <&macro_release>,
                <&kp LC(LSHIFT) &kp LC(RSHIFT)>,
                <&macro_tap>,
                <&kp S &kp T>;

            label = "EST";
        };

        ist: ist {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp I>,
                <&macro_release>,
                <&kp LC(LSHIFT) &kp LC(RSHIFT)>,
                <&macro_tap>,
                <&kp S &kp T>;

            label = "IST";
        };

        able: able {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp A>,
                <&macro_release>,
                <&kp LC(LSHIFT) &kp LC(RSHIFT)>,
                <&macro_tap>,
                <&kp B &kp L &kp E>;

            label = "ABLE";
        };
    };

    // &mt { tapping-term-ms = <400>; };

    keymap {
        compatible = "zmk,keymap";

        // This is a sample keymap intended to be replaced with your own

        BASE_LAYER {
            bindings = <
&qu    &kp W  &kp F  &kp P  &kp B                &kp J        &kp L  &kp U      &kp Y    &kp SEMI
&kp A  &kp R  &kp S  &kp T  &kp G                &kp M        &kp N  &kp E      &kp I    &kp O
&kp Z  &kp X  &kp C  &kp D  &kp V                &kp K        &kp H  &kp COMMA  &kp DOT  &kp FSLH
              &mo 3  &mo 1  &mt LSHFT BACKSPACE  &lt 5 SPACE  &mo 2  &mo 4
            >;

            label = "Base";
        };

        NUM_LAYER {
            bindings = <
&kp LS(EXCL)   &kp LS(AT)    &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)  &kp FSLH      &kp N7   &kp N8  &kp N9  &kp MINUS
&kp LS(CARET)  &kp LS(AMPS)  &kp LS(STAR)   &kp LS(LPAR)  &kp LS(RPAR)   &kp EQUAL     &kp N4   &kp N5  &kp N6  &kp LS(UNDER)
&kp GRAVE      &kp SPACE     &kp SPACE      &kp SPACE     &kp SPACE      &kp LS(STAR)  &kp N1   &kp N2  &kp N3  &kp LS(PLUS)
                             &trans         &trans        &trans         &kp N0        &kp DOT  &trans
            >;

            label = "Num";
        };

        NAV_LAYER {
            bindings = <
&kp SPACE  &kp SPACE  &kp SPACE  &kp SPACE  &kp SPACE  &kp HOME   &kp PG_DN  &kp PG_UP  &kp END    &kp SPACE
&kp SPACE  &kp SPACE  &kp SPACE  &kp SPACE  &kp SPACE  &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &kp SPACE
&kp SPACE  &kp SPACE  &kp SPACE  &kp SPACE  &kp SPACE  &kp SPACE  &kp SPACE  &kp SPACE  &kp SPACE  &kp SPACE
                      &trans     &trans     &trans     &trans     &trans     &trans
            >;

            label = "Nav";
        };

        MOD_LAYER {
            bindings = <
&trans    &trans    &trans     &trans     &trans  &trans  &trans     &trans     &trans    &trans
&kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans  &trans  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI
&trans    &trans    &trans     &trans     &trans  &trans  &trans     &trans     &trans    &trans
                    &trans     &trans     &trans  &trans  &trans     &trans
            >;

            label = "Mod";
        };

        SETTINGS_LAYER {
            bindings = <
&bootloader  &trans  &trans  &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 3  &trans  &trans  &trans  &bootloader
&trans       &trans  &trans  &trans      &bt BT_SEL 1  &bt BT_SEL 4  &trans  &trans  &trans  &trans
&trans       &trans  &trans  &trans      &bt BT_SEL 2  &trans        &trans  &trans  &trans  &trans
                     &trans  &trans      &trans        &trans        &trans  &trans
            >;

            label = "Sett";
        };

        second_layer {
            bindings = <
&kp Q      &kp ESC    &kp LC(B)  &kp B   &trans         &trans  &kp J   &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp APOS
&kp TAB    &trans     &kp LC(V)  &kp G   &trans         &trans  &kp M   &kp LPAR        &kp RPAR         &kp ENTER
&kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp V   &trans         &trans  &kp K   &kp LBKT        &kp RBKT         &kp BSLH
                      &trans     &trans  &kp BACKSPACE  &trans  &trans  &trans
            >;

            label = "2nd";
        };
    };
};
